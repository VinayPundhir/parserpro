- name: parse
  description: |
    The `parse` Function extracts values from a JSON object using a specified expression.
    It takes a JSON object and an expression as input and returns the value specified by the expression.
  data: {"name": "parser-pro", "address": {"street": "random"}, "nums": [1, 2, 3, 4]}
  expression: "nums"
  expected_result: "[1, 2, 3, 4]"

- name: parse
  description: |
    The `parse` Function extracts values from a JSON object using a specified expression.
    It takes a JSON object and an expression as input and returns the value specified by the expression.
  data: {"name": "parser-pro", "address": {"street": "random"}, "nums": [1, 2, 3, 4]}
  expression: "address.street"
  expected_result: "random"

- name: parse
  description: |
    The `parse` Function extracts values from a JSON object using a specified expression.
    It takes a JSON object and an expression as input and returns the value specified by the expression.
  data: {"name": "parser-pro", "address": {"street": "random"}, "nums": [1, 2, 3, 4]}
  expression: "nums[1]"
  expected_result: "2"


- name: join
  description: |
    The `join` Function joins elements of a list using a specified delimiter.
    It takes a list of elements and a delimiter expression as input and returns a single string with elements separated by the delimiter.
  data: [1, 2, 3, 4]
  expression: "$join('|')"
  expected_result: "1|2|3|4"

- name: map_list
  description: |
    The `map_list` Function maps each element of a list to a new format specified as a dictionary.
    It takes a list and a mapping expression as input and returns a list of JSON strings with the specified format.
    Argument should be a proper dict
  data: [1, 2, 3, 4]
  expression: '$map_list({"key":".value"})'
  expected_result: '[{"key":"1"},{"key":"2"},{"key":"3"},{"key":"4"}]'

- name: map_dict
  description: |
    The `map_dict` Function maps keys and values of a dictionary to a new format specified as a dictionary.
    It renames keys based on the mapping expression and keeps the values unchanged.
    It returns a list of JSON strings with the specified format.
    Argument should be a proper dict
  data: {"name": "parser-pro"}
  expression: '$map_dict({"key-.key":".value"})'
  expected_result: '[{"key-name":"parser-pro"}]'

- name: replace
  description: |
    The `replace` Function replaces a specified substring in a string with another substring.
    It takes a string and replacement expression as input and returns the modified string.
  data: "parser-pro-v.1"
  expression: '$replace("v.1", "v.2")'
  expected_result: "parser-pro-v.2"

- name: split
  description: |
    The `split` Function splits a string into a list of substrings based on a specified delimiter.
    It takes a string and delimiter expression as input and returns a list of substrings.
  data: "parser-pro"
  expression: '$split("-")'
  expected_result: '["parser","pro"]'

- name: add
  description: |
    The `add` Function performs addition on numbers, strings, lists, or dictionaries.
    It takes one or more operands and adds them together based on the operator. Operands should be of the same type.
    Constant value can be added to strings only.
  data:
    hobbies: ["Reading", "Hiking", "Travelling"]
    age: "30"
    marks: "34"
    nums: [1, 2, 3, 4]
  expression: "hobbies + hobbies"
  expected_result: '["Reading","Hiking","Travelling","Reading","Hiking","Travelling"]'

- name: add
  description: |
    The `add` Function performs addition on numbers, strings, lists, or dictionaries.
    It takes one or more operands and adds them together based on the operator. Operands should be of the same type.
    Constant value can be added to strings only.
  data:
    hobbies: ["Reading", "Hiking", "Travelling"]
    age: "30"
    marks: "34"
    nums: [1, 2, 3, 4]
  expression: "age + marks"
  expected_result: "3034"

- name: add
  description: |
    The `add` Function performs addition on numbers, strings, lists, or dictionaries.
    It takes one or more operands and adds them together based on the operator. Operands should be of the same type.
    Constant value can be added to strings only.
  data:
    hobbies: ["Reading", "Hiking", "Travelling"]
    age: "30"
    marks: "34"
    nums: [1, 2, 3, 4]
  expression: "nums[1] + nums[3]"
  expected_result: "6"

- name: add
  description: |
    The `add` Function performs addition on numbers, strings, lists, or dictionaries.
    It takes one or more operands and adds them together based on the operator. Operands should be of the same type.
    Constant value can be added to strings only.
  data:
    hobbies: ["Reading", "Hiking", "Travelling"]
    age: "30"
    marks: "34"
    nums: [1, 2, 3, 4]
  expression: '"he is " + age + " but still he got " + marks + " marks"'
  expected_result: 'he is 30 but still he got 34 marks'

- name: get
  description: |
    Test case for the `get` function to retrieve a single value from a list.
  data: ["parser", "pro"]
  expression: "$get('0')"
  expected_result: "parser"

- name: get
  description: |
    Test case for the `get` function to retrieve a range of values from a list.
  data: ["parser", "pro", "v", "1.0"]
  expression: "$get('1', '3')"
  expected_result: "['pro', 'v']"

- name: select
  description: |
    Test case for the `select` function to select specific keys from a dictionary.
  data: {"name": "parser", "postfix": "v-0.1"}
  expression: '$select("name","postfix")'
  expected_result:
    name: parser
    postfix: v-0.1

- name: get
  description: |
    Test case for the `get` function to retrieve a range of values from a string.
  data: "parser-pro"
  expression: '$get("2","7")'
  expected_result: rser-
